: false)
/login
{ username: 'dsdsds', password: 'dsdsdsds' }
use
[Function: verified]
{ provider: 'local', username: 'dsdsds', password: 'dsdsdsds' }
verify
{ provider: 'local', username: 'dsdsds', password: 'dsdsdsds' }
serialzae
{ asd: 11 }
set
1559635607503-fyl-9fZJNzbCG3uGQyw8IaT_sb2x-Zwy { passport:
   { user:
      { asd: 11,
        fuck:
         'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd' } },
  _expire: 1559722007512,
  _maxAge: 86400000 } 86410000
1559635607503-fyl-9fZJNzbCG3uGQyw8IaT_sb2x-Zwy
/login
deserialzae
{ asd: 11,
  fuck:
   'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd' }
/login
{}
ddddddddddddddddddddddd
{ passport:
   { user:
      { asd: 11,
        fuck:
         'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd' } } }
{ asd: 11,
  fuck:
   'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd' }
{ host: 'localhost:7001',
  cookie:
   'EGG_SESS=w-WhhyyqkEcXOr36VQ3ZKiARa4eYdws5ozE-MDJFJRq7VpFNPZ8sGtq6dsyA9_N5',
  connection: 'close' }
true
















Before continuing, verify the record is deployed.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Press Enter to Continue
Waiting for verification...
Cleaning up challenges

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/huishenghuo.net/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/huishenghuo.net/privkey.pem
   Your cert will expire on 2019-07-24. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot-auto
   again. To non-interactively renew *all* of your certificates, run
   "certbot-auto renew"
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

  /usr/share/nginx/html;

cert.pem  chain.pem  fullchain.pem  privkey.pem  README
 /etc/letsencrypt/live/huishenghuo.net/

docker run --rm -p 80:80 -p 443:443 -it --mount type=bind,source=/root/nginx/conf.d,target=/etc/nginx/conf.d \
 --mount type=bind,source=/root/nginx/ssl.d,target=/etc/nginx/ssl.d nginx bash
registry-1.docker.io.   37      IN      A       34.233.151.211
registry-1.docker.io.   37      IN      A       52.22.67.152
registry-1.docker.io.   37      IN      A       34.228.211.243
registry-1.docker.io.   37      IN      A       52.70.175.131
registry-1.docker.io.   37      IN      A       34.232.31.24
registry-1.docker.io.   37      IN      A       52.22.201.61
registry-1.docker.io.   37      IN      A       52.87.94.70
registry-1.docker.io.   37      IN      A       54.165.149.19










{
  "registry-mirrors": ["https://registry.docker-cn.com"]
}
docker run --rm --mount  type=bind,source=/root/ytw 

<xml>
   <appid>wxa3729a934847ddfb</appid>
   <body>thi-eqwe</body>
   <mch_id>1510946171</mch_id>
   <nonce_str>dsdsdfdd121</nonce_str>
   <openid>oA6C84heEWDC0kbuZx1GiS3q3Kps11</openid>
   <out_trade_no>1</out_trade_no>
   <spbill_create_ip>221.206.100.13511</spbill_create_ip>
   <total_fee>1</total_fee>
   <trade_type>JSAPI</trade_type>
   <sign>E9D069CCB91622D54B1E611CD94ED2AD</sign>
</xml>



wx.request({
      url: `https://user.${url}/service/${options.id}/review`,
      method: "HEAD",
      success: function() {
        this.setData({
          serviceId: id
        })
      },
      fail: function(res) {
        wx.showToast({
          title: '你已作出评价',
          icon: none,
          image:"/images/fail.png",
          mask: true
        })
        setTimeout(() => wx.navigateBack({
          data: -1
        }), 1500)
      }
    })











wx.request({
      url: `https://account.${url}/service/${options.id}/review`,
      method: "PUT",
      data:{
        scores:this.data.scores,
        comment: wx.createSelectorQuery().select("textarea").
      }
      success: function() {
        wx.showToast({
          title: '评价成功',
          icon: none,
          mask: true
        })
        setTimeout(() => wx.navigateBack({
          data: -1
        }), 1500)
      }
    })






wx.config({
    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
    appId: 'wx7cff6fb4f1177c46', // 必填，公众号的唯一标识
    timestamp:1414587457 , // 必填，生成签名的时间戳
    nonceStr: 'Wm3WZYTPz0wzccnW', // 必填，生成签名的随机串
    signature:'25e0cd2ff0a6034a9052085c344e1310ab55e152',// 必填，签名
    jsApiList: ["chooseImage","downloadImage","previewImage"] // 必填，需要使用的JS接口列表
});


wx.downloadImage({
serverId: 'http://img1.imgtn.bdimg.com/it/u=1312329314,3267364743&fm=15&gp=0.jpg', // 需要下载的图片的服务器端ID，由uploadImage接口获得
isShowProgressTips: 1, // 默认为1，显示进度提示
success: function (res) {
var localId = res.localId; // 返回图片下载后的本地ID
}
});


wx.previewImage({
current: 'http://img1.imgtn.bdimg.com/it/u=1312329314,3267364743&fm=15&gp=0.jpg', // 当前显示图片的http链接
urls: [] // 需要预览的图片http链接列表
});



wx.chooseImage({
count: 1, // 默认9
sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
success: function (res) {
var localIds = res.localIds; // 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片
}
});







